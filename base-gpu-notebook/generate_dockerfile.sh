#!/usr/bin/env bash

# generate dockerfile based on different cuda versions
function generate_dockerfile {
  HEAD_COMMIT=$1
  CUDA_VERSION_DIR=$2
  BUILD_DIR=".build/$CUDA_VERSION_DIR"

  mkdir -p $BUILD_DIR
  
  cd $(cd -P -- "$(dirname -- "$0")" && pwd -P)

  # adapted from https://github.com/iot-salzburg/gpu-jupyter/blob/main/generate-Dockerfile.sh

  # Set the path of the generated Dockerfile
  export DOCKERFILE="$BUILD_DIR/Dockerfile"
  export STACKS_DIR=".build/docker-stacks"

  # Clone if docker-stacks doesn't exist, and set to the given commit or the default commit
  ls $STACKS_DIR/README.md  > /dev/null 2>&1  || (echo "Docker-stacks was not found, cloning repository" \
   && git clone https://github.com/jupyter/docker-stacks.git $STACKS_DIR)
  echo "Set docker-stacks to commit '$HEAD_COMMIT'."
  if [[ "$HEAD_COMMIT" == "latest" ]]; then
    echo "WARNING, the latest commit of docker-stacks is used. This may result in version conflicts"
    cd $STACKS_DIR && git pull && cd -
  else
    export GOT_HEAD="false"
    cd $STACKS_DIR && git pull && git reset --hard "$HEAD_COMMIT" > /dev/null 2>&1  && cd - && export GOT_HEAD="true"
    echo "$HEAD"
    if [[ "$GOT_HEAD" == "false" ]]; then
      echo "Error: The given sha-commit is invalid."
      echo "Usage: $0 -c [sha-commit] # set the head commit of the docker-stacks submodule (https://github.com/jupyter/docker-stacks/commits/main)."
      echo "Exiting"
      exit 2
    else
      echo "Set head to given commit."
    fi
  fi

  # Write the contents into the DOCKERFILE and start with the header
  echo "# This Dockerfile is generated by 'generate-dockerfile.sh' from elements within './'

  # **Please do not change this file directly!**
  # To adapt this Dockerfile, adapt 'generate-dockerfile.sh' or 'Dockerfile.libs'.
  # More information can be found in the README under configuration.

  " > $DOCKERFILE

  echo "
  ############################################################################
  #################### Dependency: cuda version nvidia/cuda:tag ##############
  ############################################################################
  " >> $DOCKERFILE

  cat $CUDA_VERSION_DIR/Dockerfile >> $DOCKERFILE

  echo "
  ############################################################################
  #################### Dependency: jupyter/docker-stacks-foundation ##########
  ############################################################################
  " >> $DOCKERFILE

  # Copy xfce desktop configuration
  cp user-dirs.defaults $BUILD_DIR

  # remove default root container
  DOCKER_STACKS_FOUNDATION=$STACKS_DIR/images/docker-stacks-foundation
  #grep -v "ARG ROOT_CONTAINER" $DOCKER_STACKS_FOUNDATION/Dockerfile >> $DOCKERFILE
  cat $DOCKER_STACKS_FOUNDATION/Dockerfile | grep -v "ARG ROOT_CONTAINER" >> $DOCKERFILE
  #cat $DOCKER_STACKS_FOUNDATION/Dockerfile >> $DOCKERFILE

  # copy files that are used during the build:
  cp $DOCKER_STACKS_FOUNDATION/fix-permissions $BUILD_DIR
  cp $DOCKER_STACKS_FOUNDATION/start.sh $BUILD_DIR
  cp $DOCKER_STACKS_FOUNDATION/initial-condarc $BUILD_DIR

  echo "
  ############################################################################
  #################### Dependency: jupyter/base-notebook #####################
  ############################################################################
  " >> $DOCKERFILE

  DOCKER_STACKS_BASE_NOTEBOOK=$STACKS_DIR/images/base-notebook
  # copy base notebook Dockerfile without base image
  cat $DOCKER_STACKS_BASE_NOTEBOOK/Dockerfile | tail -n +8 >> $DOCKERFILE

  # copy files that are used during the build:
  cp $DOCKER_STACKS_BASE_NOTEBOOK/jupyter_server_config.py $BUILD_DIR
  cp $DOCKER_STACKS_BASE_NOTEBOOK/start-notebook.sh $BUILD_DIR
  cp $DOCKER_STACKS_BASE_NOTEBOOK/start-singleuser.sh $BUILD_DIR
  cp $DOCKER_STACKS_BASE_NOTEBOOK/docker_healthcheck.py $BUILD_DIR
  cp $DOCKER_STACKS_BASE_NOTEBOOK/.dockerignore $BUILD_DIR

  echo "
  ############################################################################
  ################# Dependency: jupyter/minimal-notebook #####################
  ############################################################################
  " >> $DOCKERFILE

  DOCKER_STACKS_MINIMAL_NOTEBOOK=$STACKS_DIR/images/minimal-notebook
  cat $DOCKER_STACKS_MINIMAL_NOTEBOOK/Dockerfile | grep -v BASE_CONTAINER >> $DOCKERFILE
  rm $DOCKER_STACKS_MINIMAL_NOTEBOOK/Dockerfile
  cp -r $DOCKER_STACKS_MINIMAL_NOTEBOOK/* $BUILD_DIR

  chmod 755 .build/*

  echo "
  ############################################################################
  ################# Dependency: a2s cluster dependencies #####################
  ############################################################################
  " >> $DOCKERFILE

  cat Dockerfile.libs >> $DOCKERFILE

  # Set environment variables
  export JUPYTER_UID=$(id -u)
  export JUPYTER_GID=$(id -g)

  #cp $(find $(dirname $DOCKERFILE) -type f | grep -v $STACKS_DIR | grep -v .gitkeep) .
  echo
  echo "The GPU Dockerfile was generated successfully in file ${DOCKERFILE}."
  
}

for dir in */; do
  # please test the build of the commit in https://github.com/jupyter/docker-stacks/commits/main in advance
  HEAD_COMMIT="5f8524df5b20ce8d0e9daefb48eaa45a85382d5d"
  CUDA_VERSION_DIR=${dir%*/}
  echo "Creating build dir for $dir"
  generate_dockerfile $HEAD_COMMIT $CUDA_VERSION_DIR
done
